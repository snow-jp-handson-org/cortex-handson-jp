# コピペ用各種パラメーター

## DBオブジェクト関連
データベース名： SNOWRETAIL_DB
スキーマ名: SNOWRETAIL_SCHEMA
ステージ名: 
- FILE
- SEMANTIC_MODEL_STAGE

ウェアハウス名: COMPUTE_WH

## ハンズオン2関連

### Step1: データ準備

#### SPLIT_TEXT_RECURSIVE_CHARACTER関数
                    SELECT SNOWFLAKE.CORTEX.SPLIT_TEXT_RECURSIVE_CHARACTER(
                        ?,
                        'none',  -- 区切り方法（段落や文など）
                        300,     -- 最大チャンクサイズ（文字数）
                        30        -- オーバーラップの文字数
                    ) as split_result

#### TRANSLATE関数
                SELECT SNOWFLAKE.CORTEX.TRANSLATE(?, '', 'en') as translated
            """, params=[review['REVIEW_TEXT']]).collect()[0]['TRANSLATED']

#### SENTIMENT関数
                SELECT SNOWFLAKE.CORTEX.SENTIMENT(?) as score
            """, params=[translated_full_text]).collect()[0]['SCORE']

#### EMBEDDING関数
                        SNOWFLAKE.CORTEX.EMBED_TEXT_1024(?, ?),

### Step2: 顧客の声分析

#### CLASSIFY_TEXT関数
                    SELECT 
                        SNOWFLAKE.CORTEX.CLASSIFY_TEXT(
                            ?,  -- 分類するテキスト
                            PARSE_JSON(?),  -- 分類カテゴリのリスト
                            {
                                'task_description': 'レビューテキストの内容から最も適切なカテゴリを選択してください。'
                            }
                        ) as classification

#### COMPLETE関数 (with 構造化出力)
                    SELECT SNOWFLAKE.CORTEX.COMPLETE(
                        ?,  -- 使用するLLMモデル
                        [
                            {
                                'role': 'system',
                                'content': '複数のレビューテキストから重要な単語を抽出し、品詞と出現回数を分析してください。各レビューごとに分析結果を提供してください。'
                            },
                            {
                                'role': 'user',
                                'content': ?  -- 分析する複数レビューテキスト（JSONフォーマット）
                            }
                        ],
                        {
                            'temperature': 0,  -- 生成結果の多様性（0=決定的な出力）
                            'max_tokens': 2000,  -- 最大応答トークン数を増やす
                            'response_format': {
                                'type': 'json',
                                'schema': {
                                    'type': 'object',
                                    'properties': {
                                        'reviews_analysis': {
                                            'type': 'array',
                                            'items': {
                                                'type': 'object',
                                                'properties': {
                                                    'review_id': {
                                                        'type': 'string',
                                                        'description': 'レビューのID'
                                                    },
                                                    'words': {
                                                        'type': 'array',
                                                        'items': {
                                                            'type': 'object',
                                                            'properties': {
                                                                'word': {
                                                                    'type': 'string',
                                                                    'description': '抽出された単語'
                                                                },
                                                                'type': {
                                                                    'type': 'string',
                                                                    'enum': ['名詞', '動詞', '形容詞'],
                                                                    'description': '品詞（名詞、動詞、形容詞のいずれか）'
                                                                },
                                                                'frequency': {
                                                                    'type': 'integer',
                                                                    'description': '単語の出現回数'
                                                                }
                                                            },
                                                            'required': ['word', 'type', 'frequency']
                                                        }
                                                    }
                                                },
                                                'required': ['review_id', 'words']
                                            }
                                        }
                                    },
                                    'required': ['reviews_analysis']
                                }
                            }
                        }
                    ) as result

#### ベクトル類似度関数
                    WITH query_embedding AS (
                        SELECT SNOWFLAKE.CORTEX.EMBED_TEXT_1024('{embedding_model}', ?) AS vector
                    )
                    SELECT 
                        ca.review_id,
                        r.product_id,
                        r.rating,
                        r.review_text,
                        r.review_date,
                        r.purchase_channel,
                        r.helpful_votes,
                        ca.chunked_text,
                        ca.sentiment_score,
                        t.category_name,
                        VECTOR_COSINE_SIMILARITY(ca.embedding, (SELECT vector FROM query_embedding)) as similarity_score
                    FROM CUSTOMER_ANALYSIS ca
                    JOIN CUSTOMER_REVIEWS r ON ca.review_id = r.review_id
                    LEFT JOIN REVIEW_TAGS t ON r.review_id = t.review_id
                    WHERE ca.embedding IS NOT NULL
                    AND VECTOR_COSINE_SIMILARITY(ca.embedding, (SELECT vector FROM query_embedding)) >= ?
                    ORDER BY similarity_score DESC
                    LIMIT ?
