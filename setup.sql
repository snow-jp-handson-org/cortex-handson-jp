// Step1: 環境設定 //

-- ロールの指定
USE ROLE ACCOUNTADMIN;
USE WAREHOUSE COMPUTE_WH;

-- クロスリージョン推論の有効化
ALTER ACCOUNT SET CORTEX_ENABLED_CROSS_REGION = 'ANY_REGION';


// Step2: 各種オブジェクトの作成 //

-- データベースの作成
CREATE OR REPLACE DATABASE SNOWRETAIL_DB;
-- スキーマの作成
CREATE OR REPLACE SCHEMA SNOWRETAIL_DB.SNOWRETAIL_SCHEMA;
-- スキーマの指定
USE SCHEMA SNOWRETAIL_DB.SNOWRETAIL_SCHEMA;

-- ステージの作成
CREATE OR REPLACE STAGE SNOWRETAIL_DB.SNOWRETAIL_SCHEMA.FILE DIRECTORY = (ENABLE = TRUE);
CREATE OR REPLACE STAGE SNOWRETAIL_DB.SNOWRETAIL_SCHEMA.SEMANTIC_MODEL_STAGE DIRECTORY = (ENABLE = TRUE);



// Step3: 公開されているGitからデータとスクリプトを取得 //

-- Git連携のため、API統合を作成する
CREATE OR REPLACE API INTEGRATION git_api_integration
  API_PROVIDER = git_https_api
  API_ALLOWED_PREFIXES = ('https://github.com/snow-jp-handson-org/')
  ENABLED = TRUE;

-- GIT統合の作成
CREATE OR REPLACE GIT REPOSITORY GIT_INTEGRATION_FOR_HANDSON
  API_INTEGRATION = git_api_integration
  ORIGIN = 'https://github.com/snow-jp-handson-org/cortex-handson-jp.git';

-- チェックする
ls @GIT_INTEGRATION_FOR_HANDSON/branches/pub_20250709;

-- Githubからファイルを持ってくる
COPY FILES INTO @SNOWRETAIL_DB.SNOWRETAIL_SCHEMA.FILE FROM @GIT_INTEGRATION_FOR_HANDSON/branches/pub_20250709/data/;
COPY FILES INTO @SNOWRETAIL_DB.SNOWRETAIL_SCHEMA.SEMANTIC_MODEL_STAGE FROM @GIT_INTEGRATION_FOR_HANDSON/branches/pub_20250709/handson/sales_analysis_model.yaml;



// Step4: テーブルの作成とデータロード //

-- 店舗データwith商品マスタテーブルの作成
CREATE OR REPLACE TABLE RETAIL_DATA_WITH_PRODUCT_MASTER (
	PRODUCT_ID_MASTER VARCHAR,
	PRODUCT_NAME_MASTER VARCHAR,
	UNIT_PRICE_MASTER NUMBER,
	TRANSACTION_ID VARCHAR,
	TRANSACTION_DATE DATE,
	PRODUCT_NAME VARCHAR,
	QUANTITY NUMBER,
	UNIT_PRICE NUMBER,
	TOTAL_PRICE NUMBER,
	SIMILARITY FLOAT
);

-- ECデータwith商品マスタテーブルの作成
CREATE OR REPLACE TABLE EC_DATA_WITH_PRODUCT_MASTER (
	PRODUCT_ID_MASTER VARCHAR,
	PRODUCT_NAME_MASTER VARCHAR,
	UNIT_PRICE_MASTER NUMBER,
	TRANSACTION_ID VARCHAR,
	TRANSACTION_DATE DATE,
	PRODUCT_NAME VARCHAR,
	QUANTITY NUMBER,
	UNIT_PRICE NUMBER,
	TOTAL_PRICE NUMBER,
	SIMILARITY FLOAT
);

-- カスタマーレビューテーブルの作成
CREATE OR REPLACE TABLE CUSTOMER_REVIEWS (
	REVIEW_ID VARCHAR,
	PRODUCT_ID VARCHAR,
	CUSTOMER_ID VARCHAR,
	RATING NUMBER,
	REVIEW_TEXT VARCHAR,
	REVIEW_DATE TIMESTAMP_NTZ,
	PURCHASE_CHANNEL VARCHAR,
	HELPFUL_VOTES NUMBER
);

-- 社内ドキュメントテーブルの作成
CREATE OR REPLACE TABLE SNOW_RETAIL_DOCUMENTS (
	DOCUMENT_ID VARCHAR,
	TITLE VARCHAR,
	CONTENT VARCHAR,
	DOCUMENT_TYPE VARCHAR,
	DEPARTMENT VARCHAR,
	CREATED_AT TIMESTAMP_NTZ,
	UPDATED_AT TIMESTAMP_NTZ,
	VERSION NUMBER
);

-- ファイルフォーマットの作成
CREATE OR REPLACE TEMP FILE FORMAT temp_ff
    TYPE = csv
    SKIP_HEADER = 1
;

CREATE OR REPLACE TEMP FILE FORMAT temp_ff2
    TYPE = csv
    SKIP_HEADER = 1
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
;

-- データロード
COPY INTO RETAIL_DATA_WITH_PRODUCT_MASTER
FROM @FILE
FILE_FORMAT = (FORMAT_NAME = temp_ff)
FILES = ('retail_data_with_product_master.csv');

COPY INTO EC_DATA_WITH_PRODUCT_MASTER
FROM @FILE
FILE_FORMAT = (FORMAT_NAME = temp_ff)
FILES = ('ec_data_with_product_master.csv');

COPY INTO CUSTOMER_REVIEWS
FROM @FILE
FILE_FORMAT = (FORMAT_NAME = temp_ff)
FILES = ('customer_reviews.csv');

COPY INTO SNOW_RETAIL_DOCUMENTS
FROM @FILE
FILE_FORMAT = (FORMAT_NAME = temp_ff2)
FILES = ('snow_retail_documents.csv');



// Step5: Streamlitを作成 //

-- Streamlit in Snowflakeの作成
CREATE OR REPLACE STREAMLIT sis_snowretail_analysis_dev
    FROM @GIT_INTEGRATION_FOR_HANDSON/branches/pub_20250709/handson/dev
    MAIN_FILE = 'mainpage.py'
    QUERY_WAREHOUSE = COMPUTE_WH;

-- (Option) MVP版のStreamlit in Snowflakeの作成
-- 完成版のアプリを動かしたい場合は以下のコメントアウトを外し実行してください
-- CREATE OR REPLACE STREAMLIT sis_snowretail_analysis_mvp
--     FROM @GIT_INTEGRATION_FOR_HANDSON/branches/pub_20250709/handson/mvp
--     MAIN_FILE = 'mainpage.py'
--     QUERY_WAREHOUSE = COMPUTE_WH;



// (Option) 後片付け

-- データベースと関連オブジェクトの削除
-- Streamlit、Git統合、各種テーブルなどが全て削除されます
-- DROP DATABASE SNOWRETAIL_DB;

-- API統合の削除
-- DROP API INTEGRATION git_api_integration;

-- クロスリージョン推論の無効化
-- (有効のままで問題無ければ実行しなくても構いません)
-- ALTER ACCOUNT UNSET CORTEX_ENABLED_CROSS_REGION;
